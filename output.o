/*-- File: main.cpp start --*/
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

/*-- #include "Map.h" start --*/
#include <iostream>
#include <unordered_map>
#include <algorithm>
#include <string>
#include <vector>
#include <unordered_set>
#include <queue>
#include <map>
#include <unordered_map>
#include <iomanip>
#include <cmath>

class Cell
{
public:
	inline Cell() : x(-1), y(-1), type('*') {};
	inline Cell(int x, int y, char type) : x(x), y(y), type(type) {};
	inline int index() { return x + (y * Map::width); }
	inline operator std::string() const { return x + " " + y; };
	inline bool canMove(char dir, int length)
	{
		auto curr = this;
		for (size_t i = 0; i < length; i++)
		{
			if (curr->neighbors.find(dir) != curr->neighbors.end())
			{
				return false;
			}
			curr = curr->neighbors[dir];
		}
		return true;
	};
	inline Cell* move(char dir, int length)
	{
		auto curr = this;
		for (size_t i = 0; i < length; i++)
		{
			curr = curr->neighbors[dir];
		}
		return curr;
	};

public:
	int x;
	int y;
	char type;
	std::unordered_map<char, Cell*> neighbors;
};

class Direction
{
public:
	Direction(int x, int y, char d) : dx(x), dy(y), dir(d) {};
	int dx,
		dy;
	char dir;
};

class Map
{
public:
	static Cell GetCell(int x, int y) { return Board[x + (y * width)]; };
	static Cell GetCellByIndex(int index) { return Board[index]; };
	static Cell& GetCellRef(int x, int y) { return Board[x + (y * width)]; };
	static void AddCell(Cell cell) { Board.push_back(cell); };
	static bool IsValid(int x, int y) { return (x >= 0 && y >= 0 && x < width && y < height); };
	static void Initilize()
	{
		for (auto& cell : Board)
		{
			if (cell.type == ' ')
				SetupCell(cell);
		}
	}
private:
	static void SetupCell(Cell& cell)
	{
		Direction neighbors[4] = { Direction(0,-1,'N'), Direction(0,1,'S'), 
			Direction(-1,0,'W'), Direction(1,0,'E') };
		for (size_t i = 0; i < 4; i++)
		{
			int x = cell.x + neighbors[i].dx;
			int y = cell.y + neighbors[i].dy;
			if (IsValid(x, y))
				if (GetCell(x, y).type == '.')
				{
					cell.neighbors[neighbors[i].dir] = &GetCellRef(x, y);
				}

		}
	}
public:
	static std::vector<Cell> Board;
	static int width;
	static int height;
};


/*-- #include "Game.h" start --*/
class Game
{
};


/*-- #include "ReadInput.h" start --*/
#include <iostream>
#include <string>
/*-- #include "Game.h" start --*/
/*-- #include "Map.h" start --*/

using namespace std;

class ReadInput
{
public:
	inline static void Initilize()
	{
		int width; // size of the grid
		int height; // top left corner is (x=0, y=0)

		std::cin >> width >> height; std::cin.ignore();

        Map::width = width;
        Map::height = height;

		for (int y = 0; y < height; y++) {
			string row;
            std::getline(std::cin, row); // one line of the grid: space " " is floor, pound "#" is wall
            for (int x = 0; x < row.size(); x++)
            {
                Map::AddCell(Cell(x, y, row[x]));
            }
		}
	}

	inline static Game ReadRound(Game lastGame)
	{
        int myScore;
        int opponentScore;
        cin >> myScore >> opponentScore; cin.ignore();
        int visiblePacCount; // all your pacs and enemy pacs in sight
        cin >> visiblePacCount; cin.ignore();
        for (int i = 0; i < visiblePacCount; i++) {
            int pacId; // pac number (unique within a team)
            bool mine; // true if this pac is yours
            int x; // position in the grid
            int y; // position in the grid
            string typeId; // unused in wood leagues
            int speedTurnsLeft; // unused in wood leagues
            int abilityCooldown; // unused in wood leagues
            cin >> pacId >> mine >> x >> y >> typeId >> speedTurnsLeft >> abilityCooldown; cin.ignore();
        }
        int visiblePelletCount; // all pellets in sight
        cin >> visiblePelletCount; cin.ignore();
        for (int i = 0; i < visiblePelletCount; i++) {
            int x;
            int y;
            int value; // amount of points this pellet is worth
            cin >> x >> y >> value; cin.ignore();
        }
	}

	inline static std::string ReadLine()
	{

	}
};


/*-- #include "Agent.h" start --*/
class Agent
{
};



using namespace std;


int main()
{
    ReadInput::Initilize();
    Map::Initilize();

    while (1) {
       



        cout << "MOVE 0 15 10" << endl; // MOVE <pacId> <x> <y>
    }
}
/*-- File: main.cpp end --*/
/*-- #include "Agent.h" start --*/
/*-- #include "Game.h" start --*/
/*-- File: Map.cpp start --*/
#include <vector>
/*-- #include "Map.h" start --*/

std::vector<Cell> Map::Board;
int Map::width;
int Map::height;
/*-- File: Map.cpp end --*/
/*-- #include "Map.h" start --*/
/*-- #include "ReadInput.h" start --*/
